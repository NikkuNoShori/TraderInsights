/**
 * SnapTrade API types
 * This file defines types for the SnapTrade API integration
 */

import type {
  BrokerageAuthorization,
  Account,
  Position,
  Balance,
  AccountOrderRecord,
  AccountHoldingsAccount,
} from "snaptrade-typescript-sdk";

/**
 * SnapTrade configuration
 */
export interface SnapTradeConfig {
  clientId: string;
  consumerKey: string; // Used for both frontend and backend authentication
  redirectUri?: string; // Optional since it's generated by SnapTrade
  isDemo?: boolean;
}

/**
 * SnapTrade user
 * Ensuring userId and userSecret are required
 */
export interface SnapTradeUser {
  userId: string;
  userSecret: string;
}

/**
 * SnapTrade connection status
 */
export type ConnectionStatus = "connected" | "disconnected" | "pending";

/**
 * SnapTrade connection
 */
export type SnapTradeConnection = BrokerageAuthorization;

/**
 * SnapTrade account
 */
export type SnapTradeAccount = Account;

/**
 * SnapTrade position
 */
export type SnapTradePosition = Position;

/**
 * SnapTrade balance
 */
export type SnapTradeBalance = Balance;

/**
 * SnapTrade order
 */
export type SnapTradeOrder = AccountOrderRecord;

/**
 * SnapTrade holdings
 */
export type SnapTradeHoldings = AccountHoldingsAccount;

/**
 * SnapTrade brokerage
 */
export interface SnaptradeBrokerage {
  id: string;
  name: string;
  slug: string;
  description?: string;
  url: string;
  display_name?: string;
  aws_s3_logo_url?: string;
  aws_s3_square_logo_url?: string;
  status?: string;
  release_stage?: string;
  enabled?: boolean;
  maintenance_mode?: boolean;
  allows_fractional_units?: boolean | null;
  allows_trading?: boolean | null;
  has_reporting?: boolean | null;
  is_real_time_connection?: boolean;
  authorization_types?: Array<any>;
  exchanges?: string[];
  is_degraded?: boolean;
  allows_cryptocurrency_symbols?: boolean;
  allows_cryptocurrency_and_regular_securities?: boolean;
  brokerage_type?: {
    id: string;
    name: string;
  };
  // These appear to be derived properties not in the raw API response
  isOAuthSupported?: boolean;
  isCredentialsSupported?: boolean;
  logo?: string; // Fallback for backward compatibility
} 